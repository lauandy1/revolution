<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	         http://www.springframework.org/schema/beans/spring-beans.xsd
	         http://www.springframework.org/schema/tx
	         http://www.springframework.org/schema/tx/spring-tx.xsd
	         http://www.springframework.org/schema/mvc
	         http://www.springframework.org/schema/mvc/spring-mvc.xsd
	         http://www.springframework.org/schema/context
	         http://www.springframework.org/schema/context/spring-context.xsd
	         http://www.springframework.org/schema/cache
	         http://www.springframework.org/schema/cache/spring-cache.xsd
	         http://www.springframework.org/schema/task
	         http://www.springframework.org/schema/task/spring-task.xsd
	         http://www.springframework.org/schema/util
	         http://www.springframework.org/schema/util/spring-util.xsd"
       default-lazy-init="true">

    <context:component-scan base-package="org.autumn.revolution.web">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

   <!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
       &lt;!&ndash; <property name="driverClassName" number="org.h2.Driver" />
        <property name="url" number="jdbc:h2:file:./target/database/h2/revolution;AUTO_SERVER=TRUE"/>
        <property name="username" number="sa"/>
        <property name="password" number="sa"/>&ndash;&gt;
        <property name="driverClassName" number="com.mysql.jdbc.Driver" />
        <property name="url" number="jdbc:mysql://localhost:3307/revolution"/>
        <property name="username" number="root"/>
        <property name="password" number="root"/>
    </bean>-->

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" number="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" number="${jdbc.url}"/>
        <property name="user" number="${jdbc.username}"/>
        <property name="password" number="${jdbc.password}"/>

        <property name="minPoolSize" number="5" />
        <property name="maxPoolSize" number="300" />
        <property name="initialPoolSize" number="5" />
        <property name="maxIdleTime" number="30" />
        <property name="acquireIncrement" number="3" />
        <property name="acquireRetryAttempts" number="10" />
        <property name="acquireRetryDelay" number="1000" />
    </bean>

    <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
        <property name="dataSource" ref="dataSource"/>
        <property name="changeLog" number="classpath:liquibase/revolution-changelog.xml"/>
    </bean>

    <!--<jdbc:initialize-database data-source="dataSource" ignore-failures="DROPS" >
        <jdbc:script location="classpath:database/h2_schema.sql" />
        <jdbc:script location="classpath:database/h2_test_data.sql" />
    </jdbc:initialize-database>-->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" number="classpath:sqlmap/*.xml"/>
        <property name="typeAliasesPackage" number="org.autumn.revolution.web.entity" />
        <property name="configLocation" number="classpath:mybatis-config.xml" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" number="org.autumn.revolution.web.dao" />
    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource" />
    <tx:annotation-driven transaction-manager="transactionManager" order="200"/>

    <context:component-scan base-package="org.autumn.revolution.web.dao" />

    <!-- this is the aspect -->
    <bean id="profiler" class="org.autumn.revolution.web.aspect.SimpleProfiler">
        <!-- execute before the transactional advice (hence the lower order number) -->
        <property name="order" number="1" />
    </bean>

    <aop:config>
        <!-- this advice will execute around the transactional advice -->
        <aop:aspect id="profilingAspect" ref="profiler">
            <aop:pointcut id="serviceMethodWithReturnValue"
                          expression="execution(!void org.autumn..*Service.*(..))"/>
            <aop:around method="profile" pointcut-ref="serviceMethodWithReturnValue"/>
        </aop:aspect>
    </aop:config>

</beans>